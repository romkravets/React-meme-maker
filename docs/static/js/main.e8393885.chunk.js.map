{"version":3,"sources":["Components/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["photos","src","initialState","toptext","bottomtext","isTopDragging","isBottomDragging","topY","topX","bottomX","bottomY","MainPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openImage","index","image","base_image","Image","base64","getBase64Image","setState","prevState","objectSpread","currentImage","modalIsOpen","currentImagebase64","toggle","changeText","event","defineProperty","currentTarget","name","value","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","concat","handleMouseDown","document","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","canvas","createElement","setAttribute","svgSize","width","height","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","a","download","href","body","appendChild","click","_this2","newHeight","textStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","react_default","className","reactstrap_es","map","key","style","cursor","alt","onClick","role","isOpen","id","ref","el","xmlns","xmlnsXlink","xlinkHref","zIndex","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","for","placeholder","onChange","React","Component","App","Components_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8393885.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, ModalHeader, ModalBody, FormGroup, Label, NavbarBrand } from 'reactstrap';\n\nconst photos = [\n  { src: '/images/vict-baby.png' },\n  { src: '/images/ned.jpeg' },\n  { src: '/images/devilgirl.jpg' },\n  { src: '/images/trump.jpg' },\n  { src: '/images/one-does-not.jpg' },\n  { src: '/images/dank.png' },\n  { src: '/images/boy.png' },\n  { src: '/images/sad.png' },\n  { src: '/images/wolf.png' },\n  { src: '/images/fry.jpg' },\n  { src: '/images/jobs.jpg' },\n  { src: '/images/phone.jpg' },\n  { src: '/images/oldie.png' },\n  { src: '/images/image.png' },\n  { src: '/images/doubt.png' },\n  { src: '/images/crying.png' },\n  { src: '/images/sponge.png' },\n  { src: '/images/dog.png' },\n  { src: '/images/frust.png' },\n  { src: '/images/web.png' },\n  { src: '/images/penguin.png' }\n];\n\nconst initialState = {\n  toptext: \"\",\n  bottomtext: \"\",\n  isTopDragging: false,\n  isBottomDragging: false,\n  topY: \"10%\",\n  topX: \"50%\",\n  bottomX: \"50%\",\n  bottomY: \"90%\"\n}\n\nclass MainPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentImage: 0,\n      modalIsOpen: false,\n      currentImagebase64: null,\n      ...initialState\n    };\n  }\n\n  openImage = (index) => {\n    const image = photos[index];\n    const base_image = new Image();\n    base_image.src = image.src;\n    const base64 = this.getBase64Image(base_image);\n    this.setState(prevState => ({\n      currentImage: index,\n      modalIsOpen: !prevState.modalIsOpen,\n      currentImagebase64: base64,\n      ...initialState\n    }));\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modalIsOpen: !prevState.modalIsOpen\n    }));\n  }\n\n  changeText = (event) => {\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value\n    });\n  }\n\n  getStateObj = (e, type) => {\n    let rect = this.imageRef.getBoundingClientRect();\n    const xOffset = e.clientX - rect.left;\n    const yOffset = e.clientY - rect.top;\n    let stateObj = {};\n    if (type === \"bottom\") {\n      stateObj = {\n        isBottomDragging: true,\n        isTopDragging: false,\n        bottomX: `${xOffset}px`,\n        bottomY: `${yOffset}px`\n      }\n    } else if (type === \"top\") {\n      stateObj = {\n        isTopDragging: true,\n        isBottomDragging: false,\n        topX: `${xOffset}px`,\n        topY: `${yOffset}px`\n      }\n    }\n    return stateObj;\n  }\n\n  handleMouseDown = (e, type) => {\n    const stateObj = this.getStateObj(e, type);\n    document.addEventListener('mousemove', (event) => this.handleMouseMove(event, type));\n    this.setState({\n      ...stateObj\n    })\n  }\n\n  handleMouseMove = (e, type) => {\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\n      let stateObj = {};\n      if (type === \"bottom\" && this.state.isBottomDragging) {\n        stateObj = this.getStateObj(e, type);\n      } else if (type === \"top\" && this.state.isTopDragging){\n        stateObj = this.getStateObj(e, type);\n      }\n      this.setState({\n        ...stateObj\n      });\n    }\n  };\n\n  handleMouseUp = (event) => {\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    this.setState({\n      isTopDragging: false,\n      isBottomDragging: false\n    });\n  }\n\n  convertSvgToImage = () => {\n    const svg = this.svgRef;\n    let svgData = new XMLSerializer().serializeToString(svg);\n    const canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"id\", \"canvas\");\n    const svgSize = svg.getBoundingClientRect();\n    canvas.width = svgSize.width;\n    canvas.height = svgSize.height;\n    const img = document.createElement(\"img\");\n    img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData))));\n    img.onload = function() {\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\n      const canvasdata = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.download = \"meme.png\";\n      a.href = canvasdata;\n      document.body.appendChild(a);\n      a.click();\n    };\n  }\n\n  getBase64Image(img) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n    var ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n    var dataURL = canvas.toDataURL(\"image/png\");\n    return dataURL;\n  }\n\n  render() {\n    const image = photos[this.state.currentImage];\n    const base_image = new Image();\n    base_image.src = image.src;\n    var wrh = base_image.width / base_image.height;\n    var newWidth = 600;\n    var newHeight = newWidth / wrh;\n    const textStyle = {\n      fontFamily: \"Impact\",\n      fontSize: \"50px\",\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    }\n\n    return (\n      <div>\n        <div className=\"main-content\">\n          <div className=\"sidebar\">\n            <NavbarBrand href=\"/\">Make-a-Meme</NavbarBrand>\n            <p>\n              This is a fun 5 hour project inspired by imgur. Built with React.\n            </p>\n            <p>\n              You can add top and bottom text to a meme-template, move the text around and can save the image by downloading it.\n            </p>\n          </div>\n          <div className=\"content\">\n            {photos.map((image, index) => (\n              <div className=\"image-holder\" key={image.src}>\n                <span className=\"meme-top-caption\">Top text</span>\n                <img\n                  style={{\n                    width: \"100%\",\n                    cursor: \"pointer\",\n                    height: \"100%\"\n                  }}\n                  alt={index}\n                  src={image.src}\n                  onClick={() => this.openImage(index)}\n                  role=\"presentation\"\n                />\n              <span className=\"meme-bottom-caption\">Bottom text</span>\n              </div>\n            ))}\n          </div>\n        </div>\n        <Modal className=\"meme-gen-modal\" isOpen={this.state.modalIsOpen}>\n          <ModalHeader toggle={this.toggle}>Make-a-Meme</ModalHeader>\n          <ModalBody>\n            <svg\n              width={newWidth}\n              id=\"svg_ref\"\n              height={newHeight}\n              ref={el => { this.svgRef = el }}\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n              <image\n                ref={el => { this.imageRef = el }}\n                xlinkHref={this.state.currentImagebase64}\n                height={newHeight}\n                width={newWidth}\n              />\n              <text\n                style={{ ...textStyle, zIndex: this.state.isTopDragging ? 4 : 1 }}\n                x={this.state.topX}\n                y={this.state.topY}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                onMouseDown={event => this.handleMouseDown(event, 'top')}\n                onMouseUp={event => this.handleMouseUp(event, 'top')}\n              >\n                  {this.state.toptext}\n              </text>\n              <text\n                style={textStyle}\n                dominantBaseline=\"middle\"\n                textAnchor=\"middle\"\n                x={this.state.bottomX}\n                y={this.state.bottomY}\n                onMouseDown={event => this.handleMouseDown(event, 'bottom')}\n                onMouseUp={event => this.handleMouseUp(event, 'bottom')}\n              >\n                  {this.state.bottomtext}\n              </text>\n            </svg>\n            <div className=\"meme-form\">\n              <FormGroup>\n                <Label for=\"toptext\">Top Text</Label>\n                <input className=\"form-control\" type=\"text\" name=\"toptext\" id=\"toptext\" placeholder=\"Add text to the top\" onChange={this.changeText} />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"bottomtext\">Bottom Text</Label>\n                <input className=\"form-control\" type=\"text\" name=\"bottomtext\" id=\"bottomtext\" placeholder=\"Add text to the bottom\" onChange={this.changeText} />\n              </FormGroup>\n              <button onClick={() => this.convertSvgToImage()} className=\"btn btn-primary\">Download Meme!</button>\n            </div>\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport MainPage from './Components/MainPage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MainPage />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}